#+title: Agenda Radiator Config File
* Pre-pro
   :PROPERTIES: 
   :header-args: :tangle no
   :END:
Edit ~/.emacs.d/init.el, and add the following code:
   #+BEGIN_SRC emacs-lisp
(require 'org)
(org-babel-load-file
 (expand-file-name "agenda-radiator.org"
		   "~/org-agenda-radiator/"))
   #+END_SRC
** TODO Change these to variables
* Basic settings
Clean up the screen

I was finding that having the startup message enabled meant that after displaying the agenda, emacs would switch to the *GNU Emacs* buffer. Inhibit this behaviour, as that startup screen isn't really useful to us anyway.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
* Required agenda settings
There is a cron job which works away in the background, constantly downloading the latest version of the gtd files. When you open an org agenda, it opens the related org files. We need to make sure emacs automatically replaces the open contents whenever the underlying file changes, and that it doesn't ask for permission to do so.

#+begin_src emacs-lisp
(setq revert-without-query '(".*"))
(global-auto-revert-mode 1)
#+end_src

Ensure agendas open in the current window by default
#+begin_src emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+end_src

Ensure agendas get their own buffers.
#+begin_src emacs-lisp
(setq org-agenda-sticky t)
#+end_src
* Custom agenda behaviours
I've got a bunch of custom code running to get my agenda running just the way I like. Collected from all over the net.

 #+begin_src emacs-lisp
 (setq org-agenda-files '("~/org/gtd.org" "~/org/tickler.org"))
 (require 'org-habit)
 (setq org-agenda-window-setup 'current-window)

 (defun org-current-is-todo ()
   (string= "TODO" (org-get-todo-state)))

 (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "DELEGATED(l)" "|" "DONE(d)" "CANCELLED(c)")))


(fset 'refresh-agenda
   "r")

(setq org-agenda-custom-commands 
      '(("o" "At the office" tags-todo "@work"
         ((org-agenda-overriding-header "Office")
          (org-agenda-skip-function '(my-org-agenda-skip-all-siblings-but-first))))
	("h" "At home" tags-todo "@home"
         ((org-agenda-overriding-header "Home")
          (org-agenda-skip-function '(my-org-agenda-skip-all-siblings-but-first))))
	("e" "errands" tags-todo "@errands"
         ((org-agenda-overriding-header "Errands")
          ))
	("r" "Reading list" tags-todo "@readinglist"
         ((org-agenda-overriding-header "Reading list")
          (org-agenda-skip-function '(my-org-agenda-skip-all-siblings-but-first))))
	))

(defun org-agenda-skip-if-scheduled-later ()
"If this function returns nil, the current match should not be skipped.
Otherwise, the function must return a position from where the search
should be continued."
  (ignore-errors
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (scheduled-seconds
            (time-to-seconds
              (org-time-string-to-time
                (org-entry-get nil "SCHEDULED"))))
          (now (time-to-seconds (current-time))))
       (and scheduled-seconds
            (>= scheduled-seconds now)
            subtree-end))))

(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (org-current-is-todo)
          (setq should-skip-entry t))))
    (when should-skip-entry
      (or (outline-next-heading)
          (goto-char (point-max))))))


(setq org-agenda-todo-ignore-scheduled 'future)
(setq org-agenda-tags-todo-honor-ignore-options t)

 #+end_src
Show parent names in agenda
#+begin_src emacs-lisp
(setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
         (timeline . "  % s")
         (todo .
               " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
         (tags .
               " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
         (search . " %i %-12:c"))
      )
#+end_src
** TODO Section cleanup
- [ ] Remove unnecessary calls
- [ ] Variablize
* Radiator settings
Variables
#+begin_src emacs-lisp
(setq agenda-keys '("a" "o" "h"))
(setq agenda-buffer-names '("*Org Agenda(a)*" "*Org Agenda(o:@work)*" "*Org Agenda(h:@home)*"))
#+end_src

Open all the agendas
#+begin_src emacs-lisp
(dolist (word agenda-keys)
  (org-agenda nil word)
  )
#+end_src

Setup windows for agenda display. Populate windows with the buffers
#+begin_src emacs-lisp
 (defun syntactic-sugar/setup-agenda-windows ()
   ""
   (interactive)
   (split-window-horizontally)
   (other-window 1)
   (split-window-vertically)
   (other-window 2)
     (let ((i 0))
       (while (< i (length agenda-buffer-names))
	 (message (nth i agenda-buffer-names))
	 (set-window-buffer (nth i (window-list)) (nth i agenda-buffer-names))
	 (setq i (+ i 1))
	 )
       )
     )
(syntactic-sugar/setup-agenda-windows)
#+end_src

Setup emacs to refresh the agendas regularly
#+begin_src emacs-lisp
(defun syntactic-sugar/refresh-agendas ()
  ""
  (interactive)
  (when (and (file-exists-p "~/org/gtd.org") (file-exists-p "~/org/tickler.org"))
    (let ((i 0))
      (while (< i (length agenda-buffer-names))
	(let ((command-letter (nth i agenda-keys))(agenda-buffer-name (nth i agenda-buffer-names)))
	  (message command-letter)
	  (message agenda-buffer-name)
	  (org-agenda nil command-letter)
	  (let ((agenda-window (get-buffer-window agenda-buffer-name t)))
	    (when agenda-window
	      (with-selected-window agenda-window (org-agenda-redo))))
	  (setq i (+ i 1))
	  )))))


(run-at-time nil 15 'syntactic-sugar/refresh-agendas)
#+end_src
** TODO Namespace variables, maybe use associative array
** TODO Variablize window layout
** TODO Read file names from org agenda setup
